
- Dê mais 2 exemplos de interfaces conforme o Slide 6:
    - Cada interface deve ter pelo menos 3 objetos representativos
    - Cada interface deve ser identificada por um adjetivo
    - Cada interface deve ter pelo menos 2 métodos
          - Os métodos devem ter parâmetros e/ou retornos
          - Explique o significado dos métodos e parâmetros
          - Evite métodos triviais (ex., on/off, start/stop, connect/disconnect, etc)
    - Use a sintaxe de Java para descrever a interface e os métodos
          - Não implemente os métodos
    - Crie um trecho de código de exemplo que use os métodos
          - (pode ser um simples bloco de comandos em sequência)

1. Adjetivo (Objeto 1, 2, 3)
    - Método 1 (significado do método, parâmetros com significado)
    - Método 2 (significado do método, parâmetros com significado)
    - Sintaxe da Interface em Java
    - Exemplo de uso

2. Adjetivo (Objeto 1, 2, 3)
    - Método 1 (significado do método, parâmetros com significado)
    - Método 2 (significado do método, parâmetros com significado)
    - Sintaxe da Interface em Java
    - Exemplo de uso
    
    EXEMPLO 1. 
    A UERJ está reformando o seu estacionamanto e seu sistema de entrada. Vai utillizar 
    porteiros eletrônoicos para 
    abrir as portas e me contratou implermentar esse sistema. 
    Fiz um programa em Java com as seguintes  características. 
   1)  Funcionários e estudantes - motoristas, seriam cadastrados por carteira de motorista. 
   Defini no meu programa   UMA ARRAY_LIST_motorista(Lista estática) com  todas as carteiras de motoristas 
   cadatradas
   
   
   
   2) Fuuncionários e estudantes não motoristas. Para os funcionários será utilizada 
   a carteira funcional    que será entregue a todos com QR code e para estudantes 
   a carteira de estuadante.
   Defini no meu programa uma ARRAY_LIST_não_motorista(Lista estática) com todos os 
   estudantes e funcionários que não tem carteiras de motoristas.
   
   3) Para todos os motoristas que não tem nenhum vínculo com a UERJ, montei uma 
   LINKED_LIST_motorista(lista dinâmica) com autorização para abertura mediante a placa do veículo.
   
   4) Por fim para todos os pedrestes não motoristas a entrada será mediante um cartão a ser entregue
   na entrada. Para esse casos criei uma LINKED_LIST_nâo_motorista(lista dinâmica) 
   
  
   Por fim juntei todas as classes represetadas por listas estáticas em uma única superclasse, 
   denomindada ArrayList e todas as classes representadas por listas dinâmicas em uma
   única superclasse denominada LinkedLista - Para estas duas criei uma interface denominada List.
   
   Exemplo de código (só vou fazer o primeiro caso)
   
   
   public class UERJ_motorista extends Motorista
    public  UERJ_motorista (int x){
        super(x);
    }
   
   
   public abstract class Motorista implements IPode_entrar {
    public int x;
    public boolean cadastrado (int x) {
        return (True); (verifica se esta cadastrado)
    }
    
    public interface IPode_entrar {
    public boolean cadastrado (int x);
   
   }
   ############################################################################################################################
   Exemplo 2 - Sistema bancario. 
   Fui contratado para criar em Java programa para controle de um banco.
   Esse será assim definido:
   classes: conta_corrente, conta_salario e poupança. 
  
  superclasse: conta
  
  public class Conta extends conta_corrente(float x(){
   
   public void saque(float saque){
   float saque;
   this.conta = this.conta -saque;
   
   }- sacar um valor
   
   
   
   public void depositar (float deposito) {- depositar um valor
    float deposito;
    this.conta = this.conta +deposito;
  }
  
  public abstrat class Conta implements iBanco{
   public void saque(float saque);
  public void depositar (float deposito);
  }
  
  }
  
   
   
   
    
