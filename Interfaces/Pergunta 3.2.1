
- Dê mais 2 exemplos de interfaces conforme o Slide 6:
    - Cada interface deve ter pelo menos 3 objetos representativos
    - Cada interface deve ser identificada por um adjetivo
    - Cada interface deve ter pelo menos 2 métodos
          - Os métodos devem ter parâmetros e/ou retornos
          - Explique o significado dos métodos e parâmetros
          - Evite métodos triviais (ex., on/off, start/stop, connect/disconnect, etc)
    - Use a sintaxe de Java para descrever a interface e os métodos
          - Não implemente os métodos
    - Crie um trecho de código de exemplo que use os métodos
          - (pode ser um simples bloco de comandos em sequência)

1. Adjetivo (Objeto 1, 2, 3)
    - Método 1 (significado do método, parâmetros com significado)
    - Método 2 (significado do método, parâmetros com significado)
    - Sintaxe da Interface em Java
    - Exemplo de uso

2. Adjetivo (Objeto 1, 2, 3)
    - Método 1 (significado do método, parâmetros com significado)
    - Método 2 (significado do método, parâmetros com significado)
    - Sintaxe da Interface em Java
    - Exemplo de uso
 ############################################################################################   
    EXEMPLO 1. 
    A UERJ está reformando o seu estacionamanto e seu sistema de entrada. Vai utillizar 
    porteiros eletrônoicos para 
    abrir as portas e me contratou implermentar esse sistema. 
    Fiz um programa em Java com as seguintes  características. 
   1)  Funcionários e estudantes - motoristas, seriam cadastrados por carteira de motorista. 
   Defini no meu programa   UMA ARRAY_LIST_motorista(Lista estática) com  todas as carteiras de motoristas 
   cadatradas
   
   
   
   2) Fuuncionários e estudantes não motoristas. Para os funcionários será utilizada 
   a carteira funcional    que será entregue a todos com QR code e para estudantes 
   a carteira de estuadante.
   Defini no meu programa uma ARRAY_LIST_não_motorista(Lista estática) com todos os 
   estudantes e funcionários que não tem carteiras de motoristas.
   
   3) Para todos os motoristas que não tem nenhum vínculo com a UERJ, montei uma 
   LINKED_LIST_motorista(lista dinâmica) com autorização para abertura mediante a placa do veículo.
   
   4) Por fim para todos os pedrestes não motoristas a entrada será mediante um cartão a ser entregue
   na entrada. Para esse casos criei uma LINKED_LIST_nâo_motorista(lista dinâmica) 
   
  
   Por fim juntei todas as classes represetadas por listas estáticas em uma única superclasse, 
   denomindada ArrayList e todas as classes representadas por listas dinâmicas em uma
   única superclasse denominada LinkedLista - Para estas duas criei uma interface denominada List.
   PRECISO USAR DA INTERFACE POIS TEMOS DUAS CLASSES COM CONTRUTORES DISTINTOS UMA É UM ARRAY E OUTRA É UMA 
   LISTA LIGADA. O ADJETIVO COMUM É SER ENTRÁVEL, ISTO É ENTRAM NAS DEPENDÊNCIAS DA INSTITUIÇÃO. 
 
   
   1. ADJETIVO - "Entrável" (objeto 1-fubcionário, objeto 2 - aluno, objeto 3 - visitante)
   método 1 (Verifica_array / void)- verificar se carteira de motorista do funcionário ou aluni está no ARRAY_LISTA
   método 2 (Verifica_linked_list / void)- verificar se a placa do veículo está no LINKED_LIST
   Interface ( IPode_entrar /bool ) - autoriza a entrada.  
   
   public abstract class Motorista implements IPode_entrar {
    public int x;
    public boolean pode_entrar (int x) {
        return (True); (verifica se é entravél )
    }
    
    public interface IPode_entrar (int x){
    public boolean Ipode_entrar ;
   
   }
   
   
   
   ############################################################################################################################
   Exemplo 2 - Sistema bancario. 
   Fui contratado para criar em Java programa para controle de um banco.
    O adjettivo autorizável , permite ter acesso aos dados bancários no sistema, só que existe duas classes distintas as dos usuários
    do banco que tem autorização apenas para entrar em suas contas e a dos funcionário do banco
    que podem acessas as suas contas e a dos clientes do banco. Temos duas classes clientes, funcionários e uma superclasse usuário. 
    Esse será assim definido:
    
   
    2. ADJETIVO - "Autorizável " (objeto 1-conta-corrente, objeto 2 - conta-salario, objeto 3 - poupança)
       método 1(Sacar/void) - sacar, permite o saque em  um dos 3 objetos acima. 
       método 2(Depositar/void) - depositar, permite o depósito em um dos 3 objetos acima. 
       Interface IAutorizavel  (bool)- permite o acesso a um dos objetos acima citado mediante a senha, a diferença é que os funcionários
       do banco podem utilizar também sua sinha para acessar os objetos do clientes. 
  
 
  public abstract class usuario implements IAutorizavel {
    
    public abstract class usuario implements  IAutorizavel{
    public int x;
    public boolean pode_entrar (int x) {
        return (True); (verifica se pode acessas a conta)
    }
    
    
    public interface IIAutorizavel (int x){
    public boolean IAutorizavelr ;
   
   }
   
   
   
   
    
