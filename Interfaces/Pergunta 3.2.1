

 ############################################################################################   
    EXEMPLO 1 - Acesso as dependências da UERJ
    Utilizar a partir de um cadatro o acesso as dependencias da UERJ, istoe é entrar na UERJ, ser "Entravél".
    Foi criado um cadatro em um ARRAY (lista estática) para todos os usuários fixos e 
    os usuários temnporarios terão acesso em um cadatro que está na 
    forma de LINKED_LIST (lista dinâmica).
 
   
   1. ADJETIVO - "Entrável" (objeto 1-fubcionário, objeto 2 - aluno, objeto 3 - visitante)
   método 1 (Verifica_array / void)- verificar se carteira de motorista do funcionário ou aluni está no ARRAY_LISTA
   método 2 (Verifica_linked_list / void)- verificar se a placa do veículo está no LINKED_LIST
   Interface ( IPode_entrar /bool ) - autoriza a entrada.  
   
   public abstract class Motorista implements IPode_entrar {
    public int x;
    public boolean pode_entrar (int x) {
        return (True); (verifica se é entravél )
    }
    
    public interface IPode_entrar (int x){
    public boolean Ipode_entrar ;
   
   }
   
   
   
   ############################################################################################################################
   Exemplo 2 - Sistema bancario. 
   Fui contratado para criar em Java programa para controle de um banco.
    O adjettivo autorizável , permite ter acesso aos dados bancários no sistema, só que existe duas classes distintas as dos usuários
    do banco que tem autorização apenas para entrar em suas contas e a dos funcionário do banco
    que podem acessas as suas contas e a dos clientes do banco. Temos duas classes clientes, funcionários e uma superclasse usuário. 
    Esse será assim definido:
    
   
    2. ADJETIVO - "Autorizável " (objeto 1-conta-corrente, objeto 2 - conta-salario, objeto 3 - poupança)
       método 1(Sacar/void) - sacar, permite o saque em  um dos 3 objetos acima. 
       método 2(Depositar/void) - depositar, permite o depósito em um dos 3 objetos acima. 
       Interface IAutorizavel  (bool)- permite o acesso a um dos objetos acima citado mediante a senha, a diferença é que os funcionários
       do banco podem utilizar também sua sinha para acessar os objetos do clientes. 
  
 
  public abstract class usuario implements IAutorizavel {
    
    public abstract class usuario implements  IAutorizavel{
    public int x;
    public boolean pode_entrar (int x) {
        return (True); (verifica se pode acessas a conta)
    }
    
    
    public interface IIAutorizavel (int x){
    public boolean IAutorizavelr ;
   
   }
   
   
   
   
    
